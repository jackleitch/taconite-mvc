<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="envdte"#>
<#@ assembly name="envdte80"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#

  var project = GetProject();

  var codeElements = (CodeElements)project.CodeModel.CodeElements;

  var iTaconite = FindInterface(codeElements, "TaconiteMvc.ITaconite");

#>
// *** This code was generated by a T4 template. ***

using System.Web.Mvc;

namespace <#= project.Properties.Item("RootNamespace").Value #>
{
  /// <summary>
  /// Starting point for building a <see cref="TaconiteResult"/>.
  /// </summary>
  public static class Taconite
  {
<# foreach (var method in iTaconite.Members.OfType<CodeFunction>().Cast<CodeFunction>()) { #>
<#=GetMethodComment(method)#>
    <#=GetMethodSignature(method)#>
    {
      return (new TaconiteResult()).<#=GetMethodCall(method)#>;
    }

<# } #>
  }
}

<#+

  Project GetProject()
  {
    // Get the DTE service from the host.
    var serviceProvider = Host as IServiceProvider;
    DTE dte = null;
    if (serviceProvider != null)
      dte = serviceProvider.GetService(typeof(DTE)) as DTE;

    // Fail if we couldn't get the DTE.
    if (dte == null)
      throw new Exception("T4 can only execute through the Visual Studio host.");

    return dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject as Project;
  }

  CodeInterface FindInterface(CodeElements elements, string interfaceName)
  {
    foreach (CodeElement element in elements)
    {
      if (element is CodeNamespace || element is CodeInterface)
      {
        CodeInterface i = element as CodeInterface;
        if (i != null && i.Access == vsCMAccess.vsCMAccessPublic)
        {
          if (i.FullName == interfaceName)
            return i;
        }

        CodeNamespace ns = element as CodeNamespace;
        if (ns != null)
        {
          CodeInterface ci = FindInterface(ns.Members, interfaceName);
          if (ci != null)
            return ci;
        }
      }
    }
    return null;
  }

  string GetMethodComment(CodeFunction method)
  {
    var commentLines = Regex.Split(method.DocComment, @"\r?\n|\r").Where(x => x != "<doc>" && x != "</doc>");
    return String.Join("\r\n", commentLines.Select(x => "    /// " + x));
  }

  string GetMethodSignature(CodeFunction method)
  {
      var methodSignature = new System.Text.StringBuilder();
      methodSignature.Append("public static ");
      methodSignature.Append(method.Type.AsString);
      methodSignature.Append(" ");
      methodSignature.Append(method.Name);
      methodSignature.Append("(");
      bool isFirstParameter = true;
      foreach (var prm in method.Parameters)
      {
          CodeParameter2 p = prm as CodeParameter2;
          if (!isFirstParameter)
          {
              methodSignature.Append(", ");
          }
          else
          {
              isFirstParameter = false;
          }
          if (p.ParameterKind == vsCMParameterKind.vsCMParameterKindParamArray)
          {
              methodSignature.Append("params ");
          }
          methodSignature.Append(p.Type.AsString);
          methodSignature.Append(" ");
          methodSignature.Append(p.Name);
      }
      methodSignature.Append(")");
      return methodSignature.ToString();
  }

  string GetMethodCall(CodeFunction method)
  {
      var methodCall = new System.Text.StringBuilder();
      methodCall.Append(method.Name);
      methodCall.Append("(");
      bool isFirstParameter = true;
      foreach (var prm in method.Parameters)
      {
          CodeParameter p = prm as CodeParameter;
          if (!isFirstParameter)
          {
              methodCall.Append(", ");
          }
          else
          {
              isFirstParameter = false;
          }
          methodCall.Append(p.Name);
      }
      methodCall.Append(")");
      return methodCall.ToString();
  }     

#>