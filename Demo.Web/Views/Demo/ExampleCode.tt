<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".log" #>
<#
  var manager = Manager.Create(Host, GenerationEnvironment); 
  var project = GetProject();
  var codeElements = (CodeElements)project.CodeModel.CodeElements;
  var controller = FindClass(codeElements, "TaconiteMVC.DemoWeb.Controllers.DemoController");
  var methodSignatures = new List<string>();

  foreach (var method in controller.Members.OfType<CodeFunction>().Cast<CodeFunction>()) 
  { 
    manager.StartNewFile("ExampleCode_" + method.Name + ".cshtml");

    var indent = method.StartPoint.LineCharOffset;
    var startPoint = method.StartPoint;
    var editPoint = startPoint.CreateEditPoint();
    editPoint.StartOfLine();
    var methodText = editPoint.GetText(method.EndPoint);
  
    using (var stringReader = new StringReader(methodText)) 
    using (var stringWriter = new StringWriter())
    {
      string line;
      while ((line = stringReader.ReadLine()) != null)
        stringWriter.WriteLine(line.Substring(indent - 1));
      
      Write(stringWriter.ToString().TrimEnd());
    }

    manager.EndBlock();

    methodSignatures.Add(GetMethodSignature(method));
  } 

  manager.Process(true);
#>

Processed methods:
<# 
  foreach (var methodSignature in methodSignatures) 
    WriteLine(methodSignature);
#>

<#+

  Project GetProject()
  {
    // Get the DTE service from the host.
    var serviceProvider = Host as IServiceProvider;
    DTE dte = null;
    if (serviceProvider != null)
      dte = serviceProvider.GetService(typeof(DTE)) as DTE;

    // Fail if we couldn't get the DTE.
    if (dte == null)
      throw new Exception("T4 can only execute through the Visual Studio host.");

    return dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject as Project;
  }

  CodeClass FindClass(CodeElements elements, string className)
  {
    foreach (CodeElement element in elements)
    {
      if (element is EnvDTE.CodeNamespace || element is CodeClass)
      {
        CodeClass c = element as CodeClass;
        if (c != null && c.Access == vsCMAccess.vsCMAccessPublic)
        {
          if (c.FullName == className)
            return c;
        }

        EnvDTE.CodeNamespace ns = element as EnvDTE.CodeNamespace;
        if (ns != null)
        {
          CodeClass cc = FindClass(ns.Members, className);
          if (cc != null)
            return cc;
        }
      }
    }
    return null;
  }

  string GetMethodSignature(CodeFunction method)
  {
      var methodSignature = new System.Text.StringBuilder();
      methodSignature.Append("public static ");
      methodSignature.Append(method.Type.AsString);
      methodSignature.Append(" ");
      methodSignature.Append(method.Name);
      methodSignature.Append("(");
      bool isFirstParameter = true;
      foreach (var prm in method.Parameters)
      {
          CodeParameter p = prm as CodeParameter;
          if (!isFirstParameter)
          {
              methodSignature.Append(", ");
          }
          else
          {
              isFirstParameter = false;
          }
          methodSignature.Append(p.Type.AsString);
          methodSignature.Append(" ");
          methodSignature.Append(p.Name);
      }
      methodSignature.Append(")");
      return methodSignature.ToString();
  }
#>